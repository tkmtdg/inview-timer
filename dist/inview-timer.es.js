var t=Object.defineProperty,e=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable,s=(e,i,r)=>i in e?t(e,i,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[i]=r,o=(t,o)=>{for(var n in o||(o={}))i.call(o,n)&&s(t,n,o[n]);if(e)for(var n of e(o))r.call(o,n)&&s(t,n,o[n]);return t};"undefined"!=typeof require&&require;class n{constructor(t=null){this.debug=!1,this.target=null,this.timerID=null,this.timeout=3e3,this.timerLoop=!1,this.timerLoopLimit=null,t&&Object.assign(this,t),this._timerLoopCount=0}get debug(){return this._debug}set debug(t){this._debug=t}get target(){return this._target}set target(t){this._target=t}get timerID(){return this._timerID}set timerID(t){this._timerID=t}get timeout(){return this._timeout}set timeout(t){this._timeout=t}get timerLoop(){return this._timerLoop}set timerLoop(t){this._timerLoop=t}get timerLoopLimit(){return this._timerLoopLimit}set timerLoopLimit(t){this._timerLoopLimit=t}get timerLoopCount(){return this._timerLoopCount}get describe(){return{eventTarget:this.target,inviewTarget:this}}log(...t){this.debug&&console.log(this.constructor.name,...t)}logEvent(...t){this.log(...t,this.describe)}makeEvent(t){return new CustomEvent(t,{detail:this.describe})}dispatch(t){this.target.dispatchEvent(this.makeEvent(t)),this.logEvent(t)}setTimer(){this.logEvent("timer set");const t=window.setTimeout((()=>{if(this.dispatch("timer timedout"),this.timerID=null,this.timerLoop){if(this.timerLoopLimit>0&&this.timerLoopCount>=this.timerLoopLimit)return void this.logEvent("timer loop limit reached");this._timerLoopCount++,this.logEvent("timer loop trying #"+this.timerLoopCount),this.setTimer()}}),this.timeout);this.timerID=t}clearTimer(){this.timerID&&(window.clearTimeout(this.timerID),this.dispatch("timer canceled"))}}class g{constructor(t=null){this.debug=!1,this.observeTargets=[],this.inviewTargets=[],this.inviewTargetOptions=null,this.intersectionObserverOptions=null,t&&Object.assign(this,t)}get debug(){return this._debug}set debug(t){this._debug=t}get observeTargets(){return this._observeTargets}set observeTargets(t){this._observeTargets=t}get inviewTargets(){return this._inviewTargets}set inviewTargets(t){this._inviewTargets=t}get inviewTargetOptions(){return this._inviewTargetOptions}set inviewTargetOptions(t){this._inviewTargetOptions=t}get intersectionObserverOptions(){return this._intersectionObserverOptions}set intersectionObserverOptions(t){this._intersectionObserverOptions=t}log(...t){this.debug&&console.log(this.constructor.name,...t)}observe(){const t=new IntersectionObserver(((t,e)=>{for(const i of t)for(const t of this.inviewTargets)if(t.target===i.target){t.inview=i.isIntersecting;const e=this.inviewTargets.find(((t,e,r)=>t.target===i.target)),r=t.inview?"inview in":"inview out";e.dispatch(r);break}}),this.intersectionObserverOptions);for(const e of this.observeTargets){const i=new n(o({debug:this.debug,target:e},this.inviewTargetOptions));this.inviewTargets.push(i),i.target=e,e.addEventListener("inview in",(t=>{this.log(t.type,{eventTarget:t.target,inviewTarget:i}),i.setTimer()})),e.addEventListener("inview out",(t=>{this.log(t.type,{eventTarget:t.target,inviewTarget:i}),i.clearTimer()})),e.addEventListener("timer timedout",(t=>{this.log(t.type,{eventTarget:t.target,inviewTarget:i})})),e.addEventListener("timer canceled",(t=>{this.log(t.type,{eventTarget:t.target,inviewTarget:i})})),t.observe(e)}}}export{g as InviewTimer};
